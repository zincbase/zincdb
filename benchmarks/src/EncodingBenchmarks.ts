namespace ZincDB {
	declare const TextEncoder: any;
	declare const TextDecoder: any;

	export class EncodingBenchmarks {
		tenRandomInts = [-703074931, 81579153, 20523763, 333213472, -125770514, 348428589, 734190525, 279711408, -460596126, -541974637];
		hunderedRandomInts = [-703074931, 81579153, 20523763, 333213472, -125770514, 348428589, 734190525, 279711408, -460596126, -541974637, 277116665, -277242131, -435693909, -248219973, 944697821, -97130750, 667669324, 167889896, -891250481, 450331801, 557734308, -896113465, -384614340, -394638142, -986935498, -918952518, -428095923, -875568050, -616002701, 316271307, 744792639, -894382258, 541318646, 270152560, 188132383, 906112652, -578592181, -106930595, 728592153, 596223912, -549025987, 210749297, -272690222, -73988395, 475133059, -544043898, 343761976, 389092624, 281731324, -578091397, 185296453, 515062527, -483843546, -384664286, 53434845, -128110361, -936220597, -970315185, 198856142, 449007837, -562792717, -704917866, -859893457, 966313609, -723250933, 34001985, 619545196, -590402250, -608151851, -565871823, 748803628, -656551452, -38567603, -790966561, 902020158, -601059117, -241680028, 544253385, 47369135, -588698126, -614400040, 772841, 152785510, 376813061, -954302459, 751518611, 18002011, 860669334, -361394071, -53523354, -900207499, 415415285, -26419302, 558782912, -93496206, -344164199, 919055883, -414351764, -60363856, -823888115];
		thousandRandomInts = [-51179070, 54260233, -67756563, -81010768, -94646320, 31711503, -75300065, 9336931, -78116415, 27974193, 3545098, 44676937, 13520668, 47628325, 83742526, -22131338, -97855052, -94776224, -19701444, 44502029, -64475192, 8050718, -86810419, -46955178, 75358054, 15685354, -86960646, 63767002, -46957873, -3738969, 77839642, 41591828, -47725496, 28221836, -40430062, 94498057, 74144767, -28263739, 80249944, 5575942, 29097757, -55801328, 55558349, 38717311, 55948072, 65777157, 40197609, -86876839, 81748692, 42212404, -8786799, -2636434, -9337558, 86390112, -2544082, 94870126, -12016059, -28003736, -78608316, -66843391, 58503830, 79240279, 94348036, -23337268, 83252468, -45539529, 44034929, 22115339, 7271680, -36463035, -21383888, -54027549, -88126604, 37118835, -21929724, 61261213, 7322556, 42201990, -13326180, -96926487, 76253752, 51272925, 80334567, -37541761, 23504796, 91716641, 57559562, -9072104, -44159625, 32702494, -67511826, 76200552, 59155939, 4283351, -50223267, 60721386, -87024396, -50072413, 87941245, 58538514, 76132587, -98415388, 36972001, -32908967, -266910, -10918290, -9394317, 17906545, -69402853, -9914019, 62957810, 44348315, 12991188, -76893037, 68651940, 41306635, -65642916, -55740866, -44222895, 64506904, -58205019, -76768073, -73466842, 71464821, 58280016, -52017962, -40621793, 83371011, -44180320, 1892496, 1265527, -41818968, -61600250, -65052635, 15157148, -84435109, 51301405, 60133792, 56321350, 30155904, -49238493, -56484942, 51720090, -85074364, -35302653, -49028885, 58310975, 43497221, -71264292, 14381323, -54899768, -72093823, 35869358, 93644073, 41982729, 28607414, 29819258, -32929510, 46746550, 97134254, 94144294, 9316898, -14058871, 86902028, -7839146, -47258232, -53478113, 44985625, 64599508, 96622155, -64061859, -89871185, -41661104, 65469110, 37441985, 27316703, -15817051, -33538978, -60153549, 11455995, 57850850, 99335648, 65634332, -78681690, -71727037, -85671308, 52260077, 23792715, 87051229, 51024994, -59881265, -28676727, 96825764, -80105309, 97540531, -49674335, 22213219, 48444973, -51760032, 62058577, 24373650, -96791385, -84236920, 69237975, -61419158, 57331314, 34958149, 28487229, -58369497, -44551574, 98552032, -12982007, 88081606, 62394423, 12654998, -56970843, 91681688, -12550054, -85770586, -47393551, -81234067, -22892042, 59606899, -71279621, -28778664, 16957560, -80911252, -63825428, -11174370, -56198323, -51985335, 75222178, 41963100, 65527593, -29610440, -33322801, 60625991, -86504953, -9295176, 15393726, -98610563, -14473111, -53503, -73838811, 39845950, -34046251, 95705143, 65477302, -69575653, -1670260, -9998849, -96131445, 49575013, -84190680, 6816162, -74588513, 71580702, -94438996, 31806869, -42128349, -22965933, -82255325, 31105510, 98961704, 5505354, 28753402, -87770991, -5822837, -20884327, 98693914, -44172858, 30585272, -22429275, 44087033, -69938246, -92104951, 29836430, 12393972, 12407914, -55387642, -49832981, 52062476, 46891097, 21315714, 95939600, -53337598, 95444486, 41998885, 24738990, 15741292, -81155200, -2079083, -2709007, -26932100, -15759291, 57025046, 25615328, -62240185, 19680367, 92423365, 665202, 65279581, -95406435, 30157516, -38711417, -75991155, 9318391, -35257088, 35948970, 25675479, -59155093, 30614361, -20923424, 67591513, 16331956, -82821002, -95461440, -84643725, -9560816, -25763883, 1349621, 48702274, -63961100, -66576135, -25448313, 52784259, 32435906, 52988783, -82612016, 99317751, 2145087, -835700, -93418956, -37882914, -95064878, 86493030, 34240729, 98759321, 454742, 37604782, -69554234, -65278367, -78209838, -14174443, 28332277, 5250041, 74437770, 98296357, -21221272, 55783498, 20000986, 20130114, 93594290, -13187433, -55467197, -56135553, -51380555, 44260984, -85960302, -67016079, 59337724, -50370763, -59616674, -43832133, 92424529, 10930463, 22383274, -65458657, -11932331, -62064732, -72942488, -73896763, -98475501, 6650782, 17781982, -58526120, -8414289, -27078706, 94733464, -92323662, 53452726, -62831171, 34009486, 63735449, 18603774, -56992178, -70493188, 57145144, -96376596, -4228645, -94986704, 8703779, -19286465, 62502277, -68928623, 75591588, 86538362, -23748426, 33917523, 44059666, -83285566, -52743892, 98562035, -62998500, -76357634, -2253868, -63006532, -88322340, -50517191, -28574658, -289331, -38086212, 82477499, 63752109, -1937726, -65597911, -32093793, -12683709, -61800634, 41856394, -58688867, 9614406, 95359116, 16378885, -66096046, -20772770, -47153054, -46131641, 29186270, 64368754, -68667165, -79781779, 34360434, -47431797, 83051282, -59392387, -92696381, 702325, 25883964, -25432488, 93009291, -86592471, 73674485, -86549052, 68076283, 86104208, -77923469, -2033956, -80415093, 6039184, 64476522, 57238536, 59890645, 60000594, 62066440, 81933954, -95539542, -53832794, 40044411, 90903902, 78518840, 58147867, 42220538, 72804107, -5378668, 72617946, -25441325, -29869969, -70397305, 55703229, 31326642, 78175455, -2016148, 93673831, -23190932, -21599632, -92257264, 19561240, 3643498, -31615339, -60780025, -94393062, -59199687, 88713616, 43833309, -13669986, -49746464, 81982910, -49989542, -17526926, 27851526, 23026195, -33995672, 41190585, -44873012, 8428495, -44676835, -95342328, -5637049, -55836274, 48672089, -90839715, -80687433, 3249665, -95758808, 88571530, 80602430, -94181119, -96928170, 14851220, -52405806, 41496038, -95357683, -76896605, 13291686, -52776470, 67132896, 72810901, 638572, -38899389, 99933990, -6302218, -76524875, -84003272, 87615049, -3877686, 13285078, -93660350, -67393432, -93671252, 73176779, 75136572, 54826861, 25834121, 21822253, 56295808, -33811647, -10864918, -10803185, 49850828, -48309650, -2510184, -97976734, -55225605, -52502825, 24692845, 93158507, -67260639, 80214280, -37149373, -56519926, -92704029, 79460901, 42114151, 51411356, 49699677, -85054096, 81757529, -98958796, -95787046, -7814576, 21480895, -65128186, 49277505, 93893026, 10584951, 42747723, 26417788, 70906953, -31304413, 60989969, -26321234, -76770271, -4616768, -72117864, 32619547, -4756652, 94699379, 57552557, 49640654, 88767256, 81249744, -76424533, -3081204, 30655570, -3154089, 62560420, 70990578, 68655672, -95472214, 81185494, 37567259, 21272047, 99546773, 36424886, 21421626, -53620027, -7589209, 36321403, 54409751, -26620146, 42242076, 25408647, 70344311, 14563219, -66929427, 45142424, 37299431, 49129723, 48521033, 27499731, -58182021, -15027605, -55142413, 44832655, 77529670, 55476967, -8879385, 2031560, 29639581, 36025627, -29407442, 47639646, -57267508, 76878197, -12058342, -71360870, 6673084, -54967506, 70878356, -56436547, 98359827, -33084662, 66734487, -7254693, 7709314, -25377683, 62294276, -41972327, 213994, 93616214, -17097012, -34075881, 88212441, 36426237, 88958201, -94164769, -25972476, -76078601, 24855218, -34013746, -24485205, -77326401, 48458930, 13128729, 11425512, -67032904, -76287140, -94532782, -72315562, 21702688, -65667935, -25719804, -93717806, -44787337, 54235365, -50378729, 98916447, 44024706, 31236725, -54287241, 42166553, -95544801, -30653118, 556887, 95090811, 7340196, 74806913, 35077978, 34530456, -59543970, -99749413, 28545651, -21680980, 56656931, -52144905, 32464202, -11593796, -27075256, -836401, 69584918, -74213403, -12268559, -93349600, -50280127, 69587038, 30974349, 62208667, -49020484, -4300561, 49774291, -65037250, 68259031, 52210114, -34521472, -3883061, -68552830, -89488420, -62277085, 12046529, -78422472, -24754989, -7781927, 10517659, -49030774, 81236530, -96816073, -2799378, 19346847, 4611079, 91850821, -54233627, 60570517, 81604890, 63695124, -36683600, 55998570, -89324893, -34243225, -37438517, -56690358, -40784663, -18620783, -67305077, 22337528, 67871698, -55510044, -33970301, -11623895, 16986197, 49227307, 12804092, 98069375, 33817964, 42284884, 81693207, 60132329, 37332725, -76495075, -79982774, -95262052, -97389224, -42817356, 3634479, 43946187, -52413968, 71202020, -93702974, 53040955, -93723312, -39926774, -6538151, 74770307, 11516751, 49810151, 4345483, -26662274, 95027214, -89754005, -2385947, -44286925, -13860778, -72251166, 87538977, 99427512, 57832154, -51881206, 19441902, 21632469, 6130481, -28974186, 16995942, 1664458, 55258726, -31115013, -52255103, 32476391, -42167046, 40501489, -50964454, -3956755, 17589331, -89001076, -6254317, 92956754, 20715708, 971989, -74983553, 78933519, 54220059, -57555041, 7485312, 22005516, -35043991, 41773951, -59165290, 80349281, 61943539, -26318787, -79057653, -55720943, 51066641, -72105916, 27348694, 68711459, 73265816, 79944984, 56436072, -29771309, 16674226, 22530512, 34177592, -49509598, -13249351, -96761299, 74949749, 56018558, 53784719, 26077002, 61868943, 55798434, -81403726, 17471717, 27507940, -36768897, 30496032, -5128192, -76872241, 9118502, -7272047, 21565199, -63558125, 72331361, -44079738, -3542482, -67157087, -34396163, 22889885, 58800654, 41630019, 97199028, 11478931, -31555283, 82346475, 84621684, -82014543, -34165237, -87365191, 56060072, -35582118, -97983732, 72647672, 70995699, 87526285, 12067510, -95668540, -40867348, -25498281, 95279084, 81839843, -72094057, -7054013, 35309376, -82240964, 11194792, -93107203, 79401361, -82092310, -66812269, -59693775, 54715928, -19683407, -87042623, -9489632, 52587212, -2213310, -22447616, 86734501, -17595479, 27780683, 61850675, 58895056, -15492271, 53666720, -57903065, 77289415, 72301283, -68572470, 41052047, 63786911, -45387476, -31958715, -75595182, 9689667, -10408374, -25226873, 4892794, 15086082, -93500042, -46445343, 83532232, 77785818, -28304545, -71871756, 70236904, 81673036, 86601193, 76687125, -45805706, 86369255, 11361730, -87201394, -87713933, 44791185, -53813365, 96711852, -94240272, 21178981, 21482651, -76640281, 67634042, 34771809, -72078286, 18281798, -26216394, 19739138, 53856486, 10215154, -1983521, 63224836, -27389411, -12506894, -39815136, 74389134, -19508515, 97203902, -61288046, 59918067, 41706716, 72189392, 42912940, -12297699, -92341145, -89496723, -33337567, 39724978, -66419337, 54845217, 88907558, -86840876, -56226013, -95876799, 68565883, 77647217, 70178898, 19103257, 15674695, -83491727, -64460425, -66939501, 40812417, -6973244, 46326035, -27551133, 14511496, 82750571, 5621137, 94279921, 87471624, 94821210, 60720996, 34756601, -94672459, -99663935, -43425292, 91406444, 90449712, 77598108, -93458589, 71317375, 12494731, 13556410, -71610290, 60263750, -73520817, 68994014, -14816614, -20780596, -90836536, 98309229];

		byteCount = 25000;

		//
		randomUTF16String: string;
		randomUTF8Bytes: Uint8Array;
		randomUTF8BytesBuffer: Buffer;

		randomASCIIString: string;
		randomASCIIUTF8Bytes: Uint8Array;
		randomASCIIUTF8BytesBuffer: Buffer;

		shortRandomString: string;

		base64String: string;
		hexString: string;
		//

		uriEncodedRandomString: string;

		//
		aes: Crypto.AES;
		aesStreamOutput: Uint8Array;

		aesStringCipherOutput: string;

		aes_ctr_nodeCipher: nodecrypto.Cipher;
		plainTextBuffer: Buffer;
		//

		textEncoder: any;
		textDecoder: any;

		zeroBlockHex = "00000000000000000000000000000000";
		cipherText: Uint8Array;

		keypath: Keypath.Keypath;

		constructor() {
			this.randomUTF16String = JSRandom.getUTF16String(this.byteCount);
			this.randomUTF8Bytes = Encoding.UTF8.encodeWithJS(this.randomUTF16String);

			this.randomASCIIString = JSRandom.getWordCharacterString(100000);

			log("Random unicode string length: " + this.randomUTF16String.length, true);
			log("Random ascii string length: " + this.randomASCIIString.length, true);
			log("Random bytes length: " + this.randomUTF8Bytes.length, true);
			log("----------------------------------------------------------------------------------------------", true);

			this.shortRandomString = JSRandom.getUTF16String(100);

			this.aes = new Crypto.AES([0, 0, 0, 0]);
			this.aesStreamOutput = new Uint8Array(this.randomUTF8Bytes.length);

			if (runningInNodeJS()) {
				const NodeCrypto: typeof nodecrypto = require("crypto");
				this.aes_ctr_nodeCipher = NodeCrypto.createCipheriv("aes-128-ctr", new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]));
				this.plainTextBuffer = new Buffer([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

				this.randomUTF8BytesBuffer = new Buffer(<any>this.randomUTF8Bytes);
			}

			//this.salsa20 = new Crypto.Salsa20(new Uint32Array([0, 0, 0, 0, 0, 0, 0, 0]), new Uint32Array([0, 0]));

			if (typeof TextEncoder == "function") {
				this.textEncoder = new TextEncoder("utf-8");
				this.textDecoder = new TextDecoder("utf-8");
			}

			this.keypath = Keypath.parse("['Hello']['friend ''John''''''!'][5343]");
		}

		// Conversion
		convertUint8ArrayAndBufferBackAndForth_x1000() {
			if (runningInNodeJS()) {
				for (let i = 0; i < 1000; i++) {
					this.randomUTF8Bytes = <any>BufferTools.uint8ArrayToBuffer(this.randomUTF8Bytes);
					this.randomUTF8Bytes = BufferTools.bufferToUint8Array(<any>this.randomUTF8Bytes);
				}

			}
		}

		// UTF8
		encodeStringToUTF8() {
			Encoding.UTF8.encodeWithJS(this.randomUTF16String);
		}

		encodeStringToUTF8_TextEncoder() {
			if (this.textEncoder)
				this.textEncoder.encode(this.randomUTF16String);
		}

		encodeStringToUTF8_Node() {
			if (runningInNodeJS())
				new Buffer(this.randomUTF16String, "utf8");
		}

		decodeBytesFromUTF8() {
			Encoding.UTF8.decodeWithJS(this.randomUTF8Bytes);
		}

		decodeBytesFromUTF8_TextDecoder() {
			if (this.textDecoder)
				this.textDecoder.decode(this.randomUTF8Bytes);
		}

		decodeBytesFromUTF8_Node() {
			if (runningInNodeJS())
				this.randomUTF8BytesBuffer.toString("utf8");
		}

		// (ASCII)

		encodeASCIIStringToUTF8() {
			this.randomASCIIUTF8Bytes = Encoding.UTF8.encodeWithJS(this.randomUTF16String);
		}

		encodeASCIIStringToUTF8_Node() {
			if (runningInNodeJS())
				this.randomASCIIUTF8BytesBuffer = new Buffer(this.randomUTF16String, "utf8");
		}

		decodeBytesFromASCIIUTF8() {
			Encoding.UTF8.decodeWithJS(this.randomASCIIUTF8Bytes);
		}

		decodeBytesFromASCIIUTF8_Node() {
			if (runningInNodeJS())
				this.randomASCIIUTF8BytesBuffer.toString("utf8");
		}


		// Base64
		encodeBytesToBase64() {
			this.base64String = Encoding.Base64.encodeWithJS(this.randomUTF8Bytes);
		}

		encodeBytesToBase64_Node() {
			if (runningInNodeJS())
				this.randomUTF8BytesBuffer.toString("base64");
		}

		decodeBytesFromBase64() {
			Encoding.Base64.decodeWithJS(this.base64String);
		}

		decodeBytesFromBase64_Node() {
			if (runningInNodeJS())
				new Buffer(this.base64String, "base64");
		}

		// Hex
		encodeBytesToHex() {
			this.hexString = Encoding.Hex.encodeWithJS(this.randomUTF8Bytes);
		}

		encodeBytesToHex_Node() {
			if (runningInNodeJS())
				this.randomUTF8BytesBuffer.toString("hex");
		}

		decodeBytesFromHex() {
			Encoding.Hex.decodeWithJS(this.hexString);
		}

		decodeBytesFromHex_Node() {
			if (runningInNodeJS())
				new Buffer(this.hexString, "hex");
		}

		// Jenkins one at a time
		jenkinsOneAtAtimeBytes() {
			Hashing.Jenkins.oneAtATime(this.randomUTF8Bytes);
		}

		jenkinsOneAtAtimeString() {
			Hashing.Jenkins.oneAtATimeOfString(this.randomUTF16String);
		}

		jenkinsOneAtAtimeString_ASCII() {
			Hashing.Jenkins.oneAtATimeOfString(this.randomASCIIString);
		}

		// FNV-1a
		fnv1a() {
			Hashing.FNV.fnv1a(this.randomUTF8Bytes);
		}

		// CRC32
		CRC32() {
			Hashing.CRC32.getChecksum(this.randomUTF8Bytes);
		}

		// CRC32
		CRC32AtOffset() {
			Hashing.CRC32.getChecksum(this.randomUTF8Bytes, 1);
		}

		CRC32_UCS2String() {
			Hashing.CRC32.getChecksumForString(this.randomUTF16String);
		}

		CRC32_UCS2String_ASCII() {
			Hashing.CRC32.getChecksumForString(this.randomASCIIString);
		}


		// SHA1
		calculateSHA1() {
			Crypto.SHA1.hash(this.randomUTF8Bytes);
		}

		calculateSHA1UsingJS() {
			Crypto.SHA1.hashUsingJS(this.randomUTF8Bytes);
		}

		// AESHash
		calculateAESHAsh() {
			Crypto.AESHash.hash(this.randomUTF8Bytes);
		}

		// Escape
		encodeURIComponentRandomString() {
			this.uriEncodedRandomString = encodeURIComponent(this.randomUTF16String);
		}

		decodeURIComponentRandomString() {
			decodeURIComponent(this.uriEncodedRandomString);
		}

		// AES CTR
		aes_CTR_JS() {
			const aesStream = new Crypto.AES_CTR_JS(this.aes, [0, 0, 0, 0]);
			aesStream.transformBytes(this.randomUTF8Bytes, 0, this.aesStreamOutput, 0, this.randomUTF8Bytes.length);
		}

		aes_CTR_Node() {
			if (this.aes_ctr_nodeCipher)
				this.aes_ctr_nodeCipher.update(this.randomUTF8BytesBuffer);
		}

		// AES CBC

		aes_CBC_JS_Encryption() {
			this.cipherText = Crypto.AES_CBC_JS.encrypt(this.randomUTF8Bytes, this.zeroBlockHex, Crypto.AES_CBC.zeroBlock);
		}

		aes_CBC_JS_Decryption() {
			Crypto.AES_CBC_JS.decrypt(this.cipherText, this.zeroBlockHex, Crypto.AES_CBC.zeroBlock);
		}

		aes_CBC_Node_Encryption() {
			if (runningInNodeJS())
				this.cipherText = Crypto.AES_CBC_Node.encrypt(this.randomUTF8Bytes, this.zeroBlockHex, Crypto.AES_CBC.zeroBlock);
		}

		aes_CBC_Node_Decryption() {
			if (runningInNodeJS())
				Crypto.AES_CBC_Node.decrypt(this.cipherText, this.zeroBlockHex, Crypto.AES_CBC.zeroBlock);
		}

		// Keypath parser
		parseKeypath_x1000() {
			for (let i = 0; i < 1000; i++)
				Keypath.parse("['Hello']['friend ''John''''''!'][5343]");
		}

		stringifyKeypath_x1000() {
			for (let i = 0; i < 1000; i++)
				Keypath.stringify(this.keypath);
		}

		patchObject_x1000() {
			for (let i = 0; i < 1000; i++)
				Keypath.patchObject({}, ["Hello", "friend 'John'''!", 5343], 1234);
		}

		static start() {
			const encodingBenchmarksmarks = new EncodingBenchmarks();
			const benchmark = new Benchmark(encodingBenchmarksmarks, { maximumSamples: 200, maximumTime: 200, logToDocument: true });
			benchmark.runAll([]);
		}
	}
}