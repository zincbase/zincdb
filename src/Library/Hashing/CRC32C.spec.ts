namespace ZincDB {
	describe("Hashing:", () => {
		describe("CRC32C:", () => {
			it("Calculates CRC32C for Uint8 arrays", () => {
				const test = (values: number[], expectedChecksum: number) => {
					const checksum = Hashing.CRC32C.getChecksum(new Uint8Array(values));
					expect(checksum >>> 0).toEqual(expectedChecksum);
				}

				test([], 0);
				test([0x61], 0xc1d04330);
				test([0x66, 0x6f, 0x6f], 0xcfc4ae1d);
				test([0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64], 0xc99465aa);
				test([0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x20], 0x7e627e58);
				test([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], 0x8a9136aa);
				test([0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
					0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff], 0x62a8ab43);
				test([0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18,
					0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10,
					0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08,
					0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00], 0x113fdb5c);
			});

			it("Supports partial checksums for CRC32C", () => {
				const partialChecksum = Hashing.CRC32C.getChecksum(new Uint8Array([0x68, 0x65, 0x6c]));
				const finalChecksum = Hashing.CRC32C.getChecksum(new Uint8Array([0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64]), undefined, undefined, partialChecksum);
				expect(finalChecksum >>> 0).toEqual(0xc99465aa);
			});
		});
	});
}
